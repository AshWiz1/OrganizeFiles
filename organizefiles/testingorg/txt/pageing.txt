#include<stdio.h>
void menu(){
    printf("[1]:Load process\n");
    printf("[2]:Display main memory\n");
    printf("[3]:Process Display\n");
    printf("[4]:Remove process\n");
    printf("[5]:Quit\n");
}
typedef struct Process{
    int n;
    int arr[10];
}Process;
int totpg=32;
int mem[32]={0};
Process process[10];

void loadDisplay(){
    int temp;
    printf("Enter the id of process(0-9)\n");
    scanf("%d",&temp);
    int temp1;
    printf("Enter the number of pages\n");
    scanf("%d",&temp1);
    process[temp].n=temp1;
    int i;
    int temp2;
    for(i=0;i<temp1;i++){
        temp2=nextAvailable(temp);
        if(temp2!=-1)
            process[temp].arr[i]=temp2;
        else
            printf("The process cant be allocated no sufficient memory\n");
    }
}
void displayMainMemory(){
    int i;
    for(i=0;i<totpg;i++){
        if(i%4==0)
            printf("\n");
        printf("%d ",mem[i]);
    }
    printf("\n");
}
int nextAvailable(int id){
    int i;
    for(i=0;i<totpg;i++){
        if(mem[i]==0){
            mem[i]=id;
            return i;
        }
    }
    return -1;
}
void processDisplay(){
    int n;
    printf("Enter the process id\n");
    scanf("%d",&n);
    printf("The process id is %d\n",n);
    printf("The number of pages are %d\n",process[n].n);
    int i;
    printf("The pages are\n");
    for(i=0;i<process[n].n;i++){
        printf("%d ",process[n].arr[i]);
    }
    printf("\n");
}
void removeProcess(){
    int n;
    printf("Enter the id of the process\n");
    scanf("%d",&n);
    int i;
    for(i=0;i<process[n].n;i++){
        mem[process[n].arr[i]]=0;
    }
}
void main(){
    printf("The number of pages are 32\n");
    menu();
    int n;
    while(1){
        printf("Enter the option\n");
        scanf("%d",&n);
        switch(n){
        case 1:
            loadDisplay();
            break;
        case 2:
            displayMainMemory();
            break;
        case 3:
            processDisplay();
            break;
        case 4:
            removeProcess();
            break;
        case 5:
            exit(0);
            break;
        }
    }
}
